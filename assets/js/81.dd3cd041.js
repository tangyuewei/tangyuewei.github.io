(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{246:function(e,i,t){"use strict";t.r(i);var r=t(0),s=Object(r.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,i=e.$createElement,t=e._self._c||i;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"七大原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七大原则"}},[e._v("#")]),e._v(" 七大原则")]),e._v(" "),t("p",[e._v("开、口、合、里、最、单、依")]),e._v(" "),t("h2",{attrs:{id:"单一职责原则（single-responsibility-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则（single-responsibility-principle）"}},[e._v("#")]),e._v(" 单一职责原则（Single Responsibility Principle）")]),e._v(" "),t("p",[e._v("每一个类应该专注于做一件事情。")]),e._v(" "),t("h2",{attrs:{id:"里氏替换原则（liskov-substitution-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则（liskov-substitution-principle）"}},[e._v("#")]),e._v(" 里氏替换原则（Liskov Substitution Principle）")]),e._v(" "),t("p",[e._v("超类存在的地方，子类是可以替换的。")]),e._v(" "),t("h2",{attrs:{id:"依赖倒置原则（dependence-inversion-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒置原则（dependence-inversion-principle）"}},[e._v("#")]),e._v(" 依赖倒置原则（Dependence Inversion Principle）")]),e._v(" "),t("p",[e._v("实现尽量依赖抽象，不依赖具体实现。")]),e._v(" "),t("h2",{attrs:{id:"接口隔离原则（interface-segregation-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则（interface-segregation-principle）"}},[e._v("#")]),e._v(" 接口隔离原则（Interface Segregation Principle）")]),e._v(" "),t("p",[e._v("应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。")]),e._v(" "),t("h2",{attrs:{id:"迪米特法则（law-of-demeter）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则（law-of-demeter）"}},[e._v("#")]),e._v(" 迪米特法则（Law Of Demeter）")]),e._v(" "),t("p",[e._v("又叫最少知识原则，一个软件实体应当尽可能少的与其他实体发生相互作用。")]),e._v(" "),t("h2",{attrs:{id:"开闭原则（open-close-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则（open-close-principle）"}},[e._v("#")]),e._v(" 开闭原则（Open Close Principle）")]),e._v(" "),t("p",[e._v("面向扩展开放，面向修改关闭。")]),e._v(" "),t("h2",{attrs:{id:"组合-聚合复用原则（composite-aggregate-reuse-principle-carp）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合-聚合复用原则（composite-aggregate-reuse-principle-carp）"}},[e._v("#")]),e._v(" 组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）")]),e._v(" "),t("p",[e._v("尽量使用合成/聚合达到复用，尽量少用继承。原则： 一个类中有另一个类的对象。")])])}],!1,null,null,null);i.default=s.exports}}]);