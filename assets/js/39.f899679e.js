(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{204:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"服务路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务路由"}},[t._v("#")]),t._v(" 服务路由")]),t._v(" "),s("h2",{attrs:{id:"spring-cloud-gateway"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gateway"}},[t._v("#")]),t._v(" Spring Cloud Gateway")]),t._v(" "),s("p",[t._v("Spring Cloud Gateway功能：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("基于Spring Framework 5，Project Reactor和Spring Boot 2.0构建")])]),t._v(" "),s("li",[s("p",[t._v("能够匹配任何请求属性上的路由。")])]),t._v(" "),s("li",[s("p",[t._v("谓词和过滤器特定于路由。")])]),t._v(" "),s("li",[s("p",[t._v("Hystrix断路器集成。")])]),t._v(" "),s("li",[s("p",[t._v("Spring Cloud DiscoveryClient集成")])]),t._v(" "),s("li",[s("p",[t._v("易于编写的谓词和过滤器")])]),t._v(" "),s("li",[s("p",[t._v("请求速率限制")])]),t._v(" "),s("li",[s("p",[t._v("路径改写")])])]),t._v(" "),s("h3",{attrs:{id:"maven-依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-依赖"}},[t._v("#")]),t._v(" maven 依赖")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("<dependency"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n    <groupId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("org.springframework.cloud</groupId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n    <artifactId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("spring"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cloud"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("starter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("gateway</artifactId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n</dependency"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n")])])]),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用名称")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allow-bean-definition-overriding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由网关配置")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置与服务注册发现组件结合，这样可以采用服务名的路由策略")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("discovery")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("locator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置路由规则")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 采用自定义路由 ID（有固定用法，不同的 id 有不同的功能，详见：https://cloud.spring.io/spring-cloud-gateway/2.0.x/single/spring-cloud-gateway.html#gateway-route-filters）")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CONSUMER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("OAUTH2\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//consumer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("oauth2\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Method 方法谓词，这里是匹配 GET 和 POST 请求")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#- Method=GET,POST")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路径匹配，以 api 开头，直接配置是不生效的，看 filters 配置")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/api/user/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filters")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 前缀过滤，默认配置下，我们的请求路径是 http://localhost:9000/consumer-oauth2/** 这时会路由到指定的服务")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此处配置去掉 1 个路径前缀，再配置上面的 Path=/api/**，就能按照 http://localhost:9000/api/** 的方式访问了")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" StripPrefix=1\n\n")])])]),s("h2",{attrs:{id:"zuul"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zuul"}},[t._v("#")]),t._v(" Zuul")]),t._v(" "),s("h3",{attrs:{id:"maven-依赖-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-依赖-2"}},[t._v("#")]),t._v(" maven 依赖")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("<dependency"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n    <groupId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("org.springframework.cloud</groupId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n    <artifactId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("spring"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cloud"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("starter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("netflix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("zuul</artifactId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n</dependency"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("启动类标注注解")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("@EnableZuulProxy\n")])])]),s("p",[t._v("yaml相关配置")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建路由地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("zuul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里可以自定义")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("demo2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匹配的路由规则")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /demo/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由的目标服务名")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("serviceId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" demo\n")])])])])}],!1,null,null,null);a.default=e.exports}}]);